Aggressive Cows
You are given an array with unique elements of stalls[], which denote the positions of stalls. You are also given an integer k which denotes the number of aggressive cows. The task is to assign stalls to k cows such that the minimum distance between any two of them is the maximum possible.

Examples:
Input: stalls[] = [1, 2, 4, 8, 9], k = 3
Output: 3
Explanation: The first cow can be placed at stalls[0], 
the second cow can be placed at stalls[2] and 
the third cow can be placed at stalls[3]. 
The minimum distance between cows in this case is 3, which is the largest among all possible ways.
Input: stalls[] = [10, 1, 2, 7, 5], k = 3
Output: 4
Explanation: The first cow can be placed at stalls[0],
the second cow can be placed at stalls[1] and
the third cow can be placed at stalls[4].
The minimum distance between cows in this case is 4, which is the largest among all possible ways.
Input: stalls[] = [2, 12, 11, 3, 26, 7], k = 5
Output: 1
Explanation: Each cow can be placed in any of the stalls, as the no. of stalls are exactly equal to the number of cows.
The minimum distance between cows in this case is 1, which is the largest among all possible ways.

Code Part:

class Solution {
  public:
    int aggressiveCows(vector<int> &stalls, int k) {
        // code here
        int n=stalls.size();
        sort(stalls.begin(),stalls.end());
        int start=1;
        int end=stalls[n-1]-stalls[0];
        int mid,ans;
        while(start<=end)
        {
            mid=start+(end-start)/2;
            int count=1,pos=stalls[0];
            for(int i=1;i<n;i++)
            {
                if(pos+mid<=stalls[i])
                {
                    count++;
                    pos=stalls[i];
                }
            }
            if(count<k)
            {
                end=mid-1;
            }
            else
            {
                ans=mid;
                start=mid+1;
            }
        }
        return ans;
        
        
        // Basic Approach to solve this problem
        // Sort them in increasing order
        // start=1 ,end=stalls[n-1]-stalls[0](max length in which cow can be tie)
        // First we allocate the stalls to first cow count=1,pos=stalls[0]
        // then we run for loop 
        //if(pos+mid<=stalls[i]) then in this tie the another cow with stalls 
        // in this condition if(count<k) to check we tie sufficient no. of cows if not go to left side
        // if yes store the answer in ans variable try to find ohter option also by taking start=mid+1
        
    }
};
